Q.A-1
SOLUTIO:-
int Z;                                              |main ()
                                                    |{
void main()                                         |  int a;
{                                                   |  int b;
        int a, b, c;                                |  int c;
        int p = 6;                                  |  int p;
        int q;                                      |  int q;
        double r;                                   |  double r;
                                                    |
        a = 10;                                     |  p = 6;
        b = 20;                                     |  a = 10;
        c = a * b + 25;                             |  b = 20;
        p = 6;                                      |  _1 = a * b;
        q = Z;                                      |  c = _1 + 25;
        r = 34.5;                                   | p = 6;
        Z =  r;                                      |  q = Z;
        Z = Z + 1 ;                                  |  r = 3.45e+1;
}                                                   |  _2 = (int) r;
                                                      Z = _2;
                                                    | Z.0_3 = Z;
~                                                   | _4 = Z.0_3 + 1;
~                                                   | Z = _4;
SOLUTIONS.
1   Each  declaration is  displayed on  its own  line as  an independent
            local variable  declaration. Initializers are broken  up into  simple 
            declarations at the  top and an assignment statement in  the body of
            the procedure.  There is no  declaration for global  variables; they
            are used directly.

        2   A GIMPLE  statement can have  at most one operation.  Any expression
            containing  more than  one  operation is  broken  up by  introducing
            temporaries.  It  is  easy  to   convert  C  expressions  to  GIMPLE
            statements by considering abstract syntax trees, where each non-leaf
            node  must  correspond  to  either a  local  or  temporary  variable
            storage.

        3   Floats/doubles  are  displayed  in   scientific  notation,  and  any
            implicit assignments to integers are  converted to explicit casts in
            GIMPLE.

        4   Reading/writing  from/to global  variables  requires  a memory  load
            or  store operation.  As  GIMPLE  statements can  have  at most  one
            operation, the only type of  statements involving globals are of the
            form "GLOBAL  = LOCAL" or  "LOCAL =  GLOBAL". This is  because while
            local variables  of a  procedure can  reside entirely  in registers,
            every read/write  to global variables  must refer to main  memory as
            they can be accessed by  other entities (threads, I/O devices, etc).
            Hence,  any operation  on global  variables (such  as the  increment
            shown  in this  example)  has  to go  through  an  indirection of  a
            temporary version of the global  inside registers (as this temporary
            value is  not visible to  I/O devices, etc). Global  temporaries are
            named similar to the global variable but with a numeric suffix.

Q.A-2
SOLUTION:-
int Z;                                  |f ()
                                        |{
void f()                                |  int a;
{                                       |  int b;
        int a, b, c;                    |  int c;
        a = Z;                          |
        if (a < 10) {                   |  a = Z;
                b = 5;                  |  if (a <= 9) goto <D.1801>; else goto
                c = 17;                 |<D.1802>;
        } else {                        |  <D.1801>:
                b = 6;                  |  b = 5;
                c = 20;                 |  c = 17;
                if (a == 0) {           |  goto <D.1803>;
                        c = 0;          |  <D.1802>:
                }                       |  b = 6;
        }                               |  c = 20;
        Z = b * 10 + c;                 |  if (a == 0) goto <D.1804>; else goto
}                                       |<D.1805>;
                                        |  <D.1804>:
                                        |  c = 0;
~                                       |  <D.1805>:
~                                       |  <D.1803>:
~                                       |  _1 = b * 10;
~                                       |  _2 = c + _1;
~                                       |  Z = _2;
~                                       |}
SOLUTION..
      1   If-blocks have been broken down  into distinct sections of code with
            labels  (named similar  to  temporary  variables). Control  transfer
            occurs with unconditional jumps (e.g. "goto X") or conditional jumps
            (e.g. "if Z then goto X else goto Y").

        2   The control-flow  graph dump shows  distinct basic blocks  which are
            named sequentially starting from  1. Basic blocks roughly correspond
            to  labels that  are created  during the  gimplification of  control
            statements.

                f ()
                {
                  int c;
                  int b;
                  int a;
                  int Z.0;
                  int D.1715;

                <bb 2>:
                  a = Z;
                  if (a <= 9)
                    goto <bb 3>;
                  else
                    goto <bb 4>;

                <bb 3>:
                  b = 5;
                  c = 17;
                  goto <bb 6>;

                <bb 4>:
                  b = 6;
                  c = 20;
                  if (a == 0)
                    goto <bb 5>;
                  else
                    goto <bb 6>;

                <bb 5>:
                  c = 0;

                <bb 6>:
                  D.1715 = b * 10;
                  Z.0 = D.1715 + c;
                  Z = Z.0;
                  return;

Q.A-3
SOLUTION:-
      int main()                              |
        {                                     |;; Function main (main, funcdef_no=0, decl_ui
            int sum = 0;                      |d=1794, cgraph_uid=0, symbol_order=0)
            int i, j;                         |
                                              |;; 4 loops found
            while(sum < 100) {                |;;
                    sum = sum * 2;            |;; Loop 0
            }                                 |;;  header 0, latch 1
                                              |;;  depth 0, outer -1
            for(i=0; i<25; i++) {             |;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
                    for(j=0; j<50; j++) {     |;;
                            sum = sum + i*j;  |;; Loop 2
                    }                         |;;  header 10, latch 9
            }                                 |;;  depth 1, outer 0
        }                                     |;;  nodes: 10 9 8 6 7
                                              |;;
~                                             |;; Loop 3
~                                             |;;  header 8, latch 7
~                                             |;;  depth 2, outer 2
~                                             |;;  nodes: 8 7
~                                             |;;
~                                             |;; Loop 1
~                                             |;;  header 4, latch 3
~                                             |;;  depth 1, outer 0
~                                             |;;  nodes: 4 3
~                                             |;; 2 succs { 4 }
~                                             |;; 3 succs { 4 }
~                                             |;; 4 succs { 3 5 }
~                                             |;; 5 succs { 10 }
~                                             |;; 6 succs { 8 }
~                                             |;; 7 succs { 8 }
~                                             |;; 8 succs { 7 9 }
~                                             |;; 9 succs { 10 }
~                                             |;; 10 succs { 6 11 }
~                                             |;; 11 succs { 12 }
~                                             |;; 12 succs { 1 }
~                                             |main ()
~                                             |{
~                                             |  int j;
~                                             |  int i;
~                                             |  int sum;
~                                             |  int D.1809;
SOLUTION.


        1   Basic blocks 2,  3 and 4 correspond to the  while-loop. A while loop
            is  nothing but  a  set  of basic  blocks  with conditional  control
            transfer, the only  notable difference being a jump to  a block that
            has been previously executed (i.e. a backward branch).

        2   A  for-loop  is  nothing  but  a  while-loop  with  the  initializer
            separated out  into an  initial basic  block, the  body of  the loop
            subsequently, the  increment part at the  end of the loop  body, and
            the conditional jump back to the start of the loop.

Q.A-4
SOLUTIONS:-
int main()                                                                            |
{                                                                                     |;; Function main (main, funcdef_no=0, decl_uid=1794, cgraph_uid=0, symbol_order=0)
    int a[3];                                                                         |
    int b[] = {1, 2, 3};                                                              |;; 2 loops found
    int i, *p;                                                                        |;;
    for (i=0; i<3; i++) {                                                             |;; Loop 0
        a[i] = b[i];                                                                  |;;  header 0, latch 1
    }                                                                                 |;;  depth 0, outer -1
    p = a;                                                                            |;;  nodes: 0 1 2 3 4 5 6
    *(p + 2) = 5;                                                                     |;;
}                                                                                     |;; Loop 1
                                                                                      |;;  header 4, latch 3
                                                                                      |;;  depth 1, outer 0
~                                                                                     |;;  nodes: 4 3
~                                                                                     |;; 2 succs { 4 }
~                                                                                     |;; 3 succs { 4 }
~                                                                                     |;; 4 succs { 3 5 }
~                                                                                     |;; 5 succs { 6 }
~                                                                                     |;; 6 succs { 1 }
~                                                                                     |main ()
~                                                                                     |{
~                                                                                     |  int * p;
~                                                                                     |  int i;
~                                                                                     |  int b[3];
~                                                                                     |  int a[3];
~                                                                                     |  int D.1804;
~                                                                                     |
~                                                                                     |  <bb 2> [0.00%]:
~                                                                                     |  b[0] = 1;
~                                                                                     |  b[1] = 2;
~                                                                                     |  b[2] = 3;
~                                                                                     |  i = 0;
~                                                                                     |  goto <bb 4>; [0.00%]
~                                                                                     |
~                                                                                     |  <bb 3> [0.00%]:
~                                                                                     |  _1 = b[i];
~                                                                                     |  a[i] = _1;
~                                                                                     |  i = i + 1;
~                                                                                     |
~                                                                                     |  <bb 4> [0.00%]:
~                                                                                     |  if (i <= 2)
~                                                                                     |    goto <bb 3>; [0.00%]
~                                                                                     |  else
~                                                                                     |    goto <bb 5>; [0.00%]
~                                                                                     |
~                                                                                     |  <bb 5> [0.00%]:
~                                                                                     |  p = &a;
                                                                               
Solutions
---------

        1   Just like  scalar initialization, it  is split from  the declaration
            and  included in  the procedure  body. In  the case  of arrays,  the
            initialization is split into  multiple statements that assign values
            to  individual array  elements. This  is to  remain consistent  with
            GIMPLE's one operation per statement policy.

        2   As GIMPLE  can perform only  one operation per statement,  it cannot
            read  and write  to  array  locations at  the  same  time (as  array
            accesses  involve offset  calculation). Thus,  these are  split into
            separate read and write statements by introducing a temporary.

        3   CLOBBER statements are used for  address-escaped variables. It is an
            annotation  to  signify  that  the  scope  of  this  address-escaped
            variable has ended.

Q.A-5
SOLUTIONS:-
;; Function main (main, funcdef_no=0, decl_uid=1794, cgraph_uid=0, symbol_order=0)    |;; Function main (main, funcdef_no=0, decl_uid=1794, cgraph_uid=0, symbol_order=0)
                                                                                      |
;; 1 loops found                                                                      |main ()
;;                                                                                    |{
;; Loop 0                                                                             |  int d;
;;  header 0, latch 1                                                                 |  int c;
;;  depth 0, outer -1                                                                 |  int b;
;;  nodes: 0 1 2 3 4 5 6                                                              |  int a;
;; 2 succs { 3 4 }                                                                    |  int D.1804;
;; 3 succs { 5 }                                                                      |  int _10;
;; 4 succs { 5 }                                                                      |
;; 5 succs { 6 }                                                                      |  <bb 2> [0.00%]:
;; 6 succs { 1 }                                                                      |  d_3 = 10;
main ()                                                                               |  if (c_4(D) > d_3)
{                                                                                     |    goto <bb 3>; [0.00%]
  int d;                                                                              |  else
  int c;                                                                              |    goto <bb 4>; [0.00%]
  int b;                                                                              |
  int a;                                                                              |  <bb 3> [0.00%]:
  int D.1804;                                                                         |  a_7 = 3;
                                                                                      |  b_8 = 2;
  <bb 2> [0.00%]:                                                                     |  goto <bb 5>; [0.00%]
  d = 10;                                                                             |
  if (c > d)                                                                          |  <bb 4> [0.00%]:
    goto <bb 3>; [0.00%]                                                              |  a_5 = 2;
  else                                                                                |  b_6 = 3;
    goto <bb 4>; [0.00%]                                                              |
                                                                                      |  <bb 5> [0.00%]:
  <bb 3> [0.00%]:                                                                     |  # a_1 = PHI <a_7(3), a_5(4)>
  a = 3;                                                                              |  # b_2 = PHI <b_8(3), b_6(4)>
  b = 2;                                                                              |  c_9 = a_1 + b_2;
  goto <bb 5>; [0.00%]                                                                |  _10 = 0;
                                                                                      |
  <bb 4> [0.00%]:                                                                     |<L3> [0.00%]:
  a = 2;                                                                              |  return _10;
  b = 3;                                                                              |
                                                                                      |}
  <bb 5> [0.00%]:                                                                     |
  c = a + b;                                                                          |
  D.1804 = 0;                                                                         |~
                                                                                      |~
<L3> [0.00%]:                                                                         |~
  return D.1804;                                                                      |~
                                                                                      |~
}                                                                                     |~

Solutions
---------

        1   Local variables are  suffixed with a unique  number which represents
            the assignment. For  example, `d_3' refers to the  usage of variable
            `d'  and  the  only  assignment  which reaches  this  point  is  the
            assignment `d_3'.  Variables that are  likely to be used  before any
            assignment are suffixed  with `(D)' to indicate  that the assignment
            was implicit in the declaration.  This happens to both uninitialized
            local variables and formal parameters.  For example, variable `c' is
            used as `c_4(D)' in the `if' condition.

        2   A PHI node merges assignments from different paths and creates a new
            assignment. For example:

                # a_1 = PHI <a_5(3), a_7(4)> 

            indicates that if  the control reaches here from basic  block 3 then
            use the  value of a_5;  otherwise if  the control reaches  here from
            basic block 4 then use the value of a_7.

        3   A switch statement can result in a merge of more than two paths (and
            hence possibly more than two assignments). Consider:

            int main()
            {
                int a, b;
                switch (a)
                {
                    case 1:
                        b = 2;
                        break;
                    case 2:
                        b = 3;
                        break;
                    case 3:
                        b = 4;
                    case 4:
                        b = 5;
                        break;
                    case 5:
                    case 6:
                        b = 6;
                        break;
                    default:
                        b = 7;
                }
                return b;
            }
Q.B-1
SOLUTIONS:-
                                                                                      |
;; Function AddTwo (AddTwo, funcdef_no=0, decl_uid=1795, cgraph_uid=0, symbol_order=0)|;; Function AddTwo (AddTwo, funcdef_no=0, decl_uid=1795, cgraph_uid=0, symbol_order=0
                                                                                      |)
AddTwo (int a)                                                                        |
{                                                                                     |Iterations: 0
  int _3;                                                                             |AddTwo (int a)
                                                                                      |{
  <bb 2> [0.00%]:                                                                     |  int _3;
  a_2 = a_1(D) + 2;                                                                   |
  _3 = a_2;                                                                           |  <bb 2> [0.00%]:
  return _3;                                                                          |  a_2 = a_1(D) + 2;
                                                                                      |  _3 = a_2;
}                                                                                     |  return _3;
                                                                                      |
                                                                                      |}
                                                                                      |
;; Function main (main, funcdef_no=1, decl_uid=1797, cgraph_uid=1, symbol_order=1)    |
                                                                                      |
main ()                                                                               |;; Function main (main, funcdef_no=1, decl_uid=1797, cgraph_uid=1, symbol_order=1)
{                                                                                     |
  int x;                                                                              |Considering inline candidate AddTwo.
  int _5;                                                                             | Inlining AddTwo into main.
                                                                                      |Iterations: 1
  <bb 2> [0.00%]:                                                                     |Merging blocks 2 and 4
  x_1 = 3;                                                                            |Merging blocks 2 and 3
  x_4 = AddTwo (x_1);                                                                 |
  _5 = x_4;                                                                           |Symbols to be put in SSA form
  return _5;                                                                          |{ D.1809 }
                                                                                      |Incremental SSA update started at block: 0
}                                                                                     |Number of blocks in CFG: 3
                                                                                      |Number of blocks to update: 2 ( 67%)
                                                                                      |
~                                                                                     |
~                                                                                     |main ()
~                                                                                     |{
~                                                                                     |  int D.1809;
~                                                                                     |  int a;
~                                                                                     |  int x;
~                                                                                     |  int _5;
~                                                                                     |
~                                                                                     |  <bb 2> [100.00%]:
~                                                                                     |  x_1 = 3;
~                                                                                     |  a_3 = x_1 + 2;
~                                                                                     |  _6 = a_3;
~                                                                                     |  x_4 = _6;
~                                                                                     |  return_5 = x_4;

        1   The function body exists because it may be called from another file.
            The compiler cannot know about this before link time.

        2   If the function was declared with the "static" keyword (which, in C,
            is something  like "private  to this file  only") then  the function
            body will disappear if there is no caller within the file.
Q.B2
SOLUTION
                                        |
;; Function main (main, funcdef_no=0, de|;; Function main (main, funcdef_no=0, d
cl_uid=1795, cgraph_uid=0, symbol_order=|ecl_uid=1795, cgraph_uid=0, symbol_orde
1)                                      |r=1) (executed once)
                                        |
main ()                                 |main ()
{                                       |{
  int a;                                |  int a;
  int i;                                |  int i;
  int N.0_1;                            |  int N.0_9;
  int _6;                               |
                                        |  <bb 2> [20.00%]:
  <bb 2> [0.00%]:                       |  N.0_9 = N;
  a_4 = 10;                             |  a_10 = N.0_9 + 10;
  i_5 = 0;                              |  a_15 = N.0_9 + a_10;
  goto <bb 4>; [0.00%]                  |  a_20 = N.0_9 + a_15;
                                        |  a_25 = N.0_9 + a_20;
  <bb 3> [0.00%]:                       |  return a_25;
  N.0_1 = N;                            |
  a_8 = a_3 + N.0_1;                    |}
  i_9 = i_2 + 1;                        |
SOLUTION
Solution
--------

        1   The loop will be unrolled and constant propogation will allow GCC to
            compute  the final  value of  `a'. Hence  the loop  will be  removed
            entirely.
    
main ()                                 |main ()
{                                       |{
  int a;                                |<bb 2>:
  int i;                                |  return 14;
  int D.1593;                           |
                                        |}
<bb 2>:                                 |
  a_3 = 10;                             |
  i_4 = 0;                              |                                      
  goto <bb 4>;                          |                                      
                                        |                                      
<bb 3>:                                 |                                      
  a_5 = a_2 + 1;                        |                                      
  i_6 = i_1 + 1;                        |                                      
                                        |                                      
<bb 4>:                                 |                                      
  # i_1 = PHI <i_4(2), i_6(3)>          |                                      
  # a_2 = PHI <a_3(2), a_5(3)>          |                                      
  if (i_1 <= 3)                         |                                      
    goto <bb 3>;                        |                                      
  else                                  |                                      
    goto <bb 5>;                        |                                      
                                        |                                      
<bb 5>:                                 |                                      
  D.1593_7 = a_2;                       |                                     
  return D.1593_7;                      |                                     
                                        |                                      
}                                       |                  

Q.B3
SOLUTION:-
                                        |
;; Function main (main, funcdef_no=12, d|;; Function main (main, funcdef_no=12,
ecl_uid=2976, cgraph_uid=12, symbol_orde|decl_uid=2976, cgraph_uid=12, symbol_or
r=12)                                   |der=12) (executed once)
                                        |
main ()                                 |;; 2 loops found
{                                       |;;
  int b;                                |;; Loop 0
  int a;                                |;;  header 0, latch 1
  int _8;                               |;;  depth 0, outer -1
                                        |;;  nodes: 0 1 2 3 4 5
  <bb 2> [0.00%]:                       |;;
  a_4 = 4;                              |;; Loop 1
  goto <bb 7>; [0.00%]                  |;;  header 4, latch 3
                                        |;;  depth 1, outer 0
  <bb 3> [0.00%]:                       |;;  nodes: 4 3
  if (a_1 <= 3)                         |;; 2 succs { 4 }
    goto <bb 4>; [0.00%]                |;; 3 succs { 4 }
  else                                  |;; 4 succs { 3 5 }
    goto <bb 5>; [0.00%]                |;; 5 succs { 1 }
                                        |
  <bb 4> [0.00%]:                       |SSA replacement table
SOLUTION:-

Solution
--------

        1   Variable `a' can take the values  4 to 99. Since, the `if' condition
            will never be  true for the give loop  bounds, [b = b +  2] is never
            executed. Therefore, the optimized  code has eliminated this program
            statement.
Q.B4
SOLUTION:-
;; Function main (main, funcdef_no=0, de|;; Function main (main, funcdef_no=0, d
cl_uid=1794, cgraph_uid=0, symbol_order=|ecl_uid=1794, cgraph_uid=0, symbol_orde
0)                                      |r=0)
                                        |
main ()                                 |main ()
{                                       |{
  int c;                                |  int c;
  int b;                                |  int b;
  int a;                                |  int a;
  int _1;                               |  int _1;
  int _2;                               |  int _2;
  int _3;                               |
  int _8;                               |  <bb 2> [0.00%]:
                                        |  _1 = a_4(D) + c_5(D);
  <bb 2> [0.00%]:                       |  _2 = _1 + b_6(D);
  _1 = a_4(D) + c_5(D);                 |  b_7 = _1 * _2;
  _2 = b_6(D) + _1;                     |  return b_7;
  _3 = c_5(D) + a_4(D);                 |
  b_7 = _2 * _3;                        |}
  _8 = b_7;                             |
  return _8;                            |
SOLUTIONS:-
Solution
--------

        1   The original code showed two computations, but the FRE pass was able
            to  reuse the  temporary variable  which  stored the  result of  the
            intitial computation  of (a +  c). Thus,  one line of  execution was
            saved, and so was the use of an extra variable.

        2   Check  the   file  B-4.c.*.optimized.   This  is  the   last  GIMPLE
            intra-procedural pass. If  it is same as the output  of FRE, then no
            more optimizations have occured.

        3   "return  b" was  required to  make the  computation of  variable `b'
            meaningful. If function  `main' is going to "return 0"  and there is
            no other  output, GCC  will realise that  the entire  computation of
            variable `b' was  dead code and will eliminate  its dependencies one
            by one until the resulting program reduces to:
        
                int main()
                {
                    return 0;
                }                          
